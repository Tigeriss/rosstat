[{"/home/ilya/Projects/rosstat/ui/src/index.tsx":"1","/home/ilya/Projects/rosstat/ui/src/app/page/orders.tsx":"2","/home/ilya/Projects/rosstat/ui/src/app/page/ordersSmall.tsx":"3","/home/ilya/Projects/rosstat/ui/src/app/page/ordersPallet.tsx":"4","/home/ilya/Projects/rosstat/ui/src/app/page/logout.tsx":"5","/home/ilya/Projects/rosstat/ui/src/app/component/layout.tsx":"6","/home/ilya/Projects/rosstat/ui/src/store/session.ts":"7","/home/ilya/Projects/rosstat/ui/src/api/orders.tsx":"8","/home/ilya/Projects/rosstat/ui/src/app/page/shipment.tsx":"9","/home/ilya/Projects/rosstat/ui/src/app/page/login.tsx":"10","/home/ilya/Projects/rosstat/ui/src/app/page/ordersBig.tsx":"11","/home/ilya/Projects/rosstat/ui/src/app/page/shipmentPallet.tsx":"12","/home/ilya/Projects/rosstat/ui/src/app/component/appHeader.tsx":"13","/home/ilya/Projects/rosstat/ui/src/app/page/admin.tsx":"14","/home/ilya/Projects/rosstat/ui/src/app/app.tsx":"15","/home/ilya/Projects/rosstat/ui/src/api/request.ts":"16"},{"size":305,"mtime":1607111137588,"results":"17","hashOfConfig":"18"},{"size":2990,"mtime":1607120130636,"results":"19","hashOfConfig":"18"},{"size":4454,"mtime":1607138893458,"results":"20","hashOfConfig":"18"},{"size":4927,"mtime":1607140280519,"results":"21","hashOfConfig":"18"},{"size":250,"mtime":1607068604891,"results":"22","hashOfConfig":"18"},{"size":680,"mtime":1607111254721,"results":"23","hashOfConfig":"18"},{"size":5796,"mtime":1607138476139,"results":"24","hashOfConfig":"18"},{"size":2336,"mtime":1607140260069,"results":"25","hashOfConfig":"18"},{"size":246,"mtime":1607072574565,"results":"26","hashOfConfig":"18"},{"size":1599,"mtime":1607070045883,"results":"27","hashOfConfig":"18"},{"size":3197,"mtime":1607120555778,"results":"28","hashOfConfig":"18"},{"size":259,"mtime":1607072574558,"results":"29","hashOfConfig":"18"},{"size":994,"mtime":1607068566931,"results":"30","hashOfConfig":"18"},{"size":1357,"mtime":1607070109829,"results":"31","hashOfConfig":"18"},{"size":2348,"mtime":1607120676941,"results":"32","hashOfConfig":"18"},{"size":923,"mtime":1607125282588,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1tyb3jq",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ilya/Projects/rosstat/ui/src/index.tsx",[],["73","74"],"/home/ilya/Projects/rosstat/ui/src/app/page/orders.tsx",["75"],"import {Observer} from \"mobx-react\";\nimport React, {useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {useSession} from \"../app\";\nimport {Layout} from \"../component/layout\";\nimport {Header, Table} from \"semantic-ui-react\";\nimport {OrdersModel, SubOrderModel} from \"../../api/orders\";\nimport {Session} from \"../../store/session\";\n\nfunction renderRow(history: ReturnType<typeof useHistory>, session: Session, order: OrdersModel) {\n    const rows = [<Table.Row positive onClick={() => session.openedOrders[order.id] = !session.openedOrders[order.id]} key={order.id}>\n        <Table.Cell width=\"1\">{order.num}</Table.Cell>\n        <Table.Cell width=\"3\">{order.order_caption}</Table.Cell>\n        <Table.Cell width=\"2\">{order.customer}</Table.Cell>\n        <Table.Cell width=\"3\">{order.address}</Table.Cell>\n        <Table.Cell width=\"1\">{order.run}</Table.Cell>\n        <Table.Cell width=\"1\">{order.amount_pallets}</Table.Cell>\n        <Table.Cell width=\"1\">{order.amount_boxes}</Table.Cell>\n    </Table.Row>];\n\n    const next = (sub: SubOrderModel) => {\n        if (sub.is_small) {\n            history.push(`/orders/small/${order.id}`);\n        } else {\n            history.push(`/orders/big/${order.id}`);\n        }\n    }\n\n    if (session.openedOrders[order.id]) {\n        let n = 0;\n        for (const sub of order.sub_orders) {\n            rows.push(\n                <Table.Row key={`${order.id}-${n}`} onClick={() => next(sub)}>\n                    <Table.Cell />\n                    <Table.Cell>{sub.order_caption}</Table.Cell>\n                    <Table.Cell />\n                    <Table.Cell />\n                    <Table.Cell />\n                    <Table.Cell>{sub.amount_pallets}</Table.Cell>\n                    <Table.Cell>{sub.amount_boxes}</Table.Cell>\n                </Table.Row>\n            );\n            n++;\n        }\n    }\n    return rows;\n}\n\nexport function OrdersPage() {\n    const session = useSession();\n    const history = useHistory();\n\n    return <Observer>{() =>\n        <Layout>\n            <Header>Комплектование</Header>\n\n            <Table celled selectable singleLine>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>№</Table.HeaderCell>\n                        <Table.HeaderCell>Заказ</Table.HeaderCell>\n                        <Table.HeaderCell>Заказчик</Table.HeaderCell>\n                        <Table.HeaderCell>Адрес</Table.HeaderCell>\n                        <Table.HeaderCell>Тираж</Table.HeaderCell>\n                        <Table.HeaderCell>Паллет</Table.HeaderCell>\n                        <Table.HeaderCell>Коробок</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {session.ordersToBuild?.map?.(renderRow.bind(null, history, session))}\n                </Table.Body>\n            </Table>\n\n        </Layout>\n    }</Observer>;\n}\n","/home/ilya/Projects/rosstat/ui/src/app/page/ordersSmall.tsx",["76"],"import React, {useEffect} from \"react\";\nimport {Observer} from \"mobx-react\";\nimport {Layout} from \"../component/layout\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {useSession} from \"../app\";\nimport {BigOrdersModel, OrdersModel} from \"../../api/orders\";\nimport {Button, Checkbox, Divider, Form, Grid, Header, Icon, Input, List, Message, Table} from \"semantic-ui-react\";\nimport {Session} from \"../../store/session\";\n\nfunction renderForm(session: Session, form: BigOrdersModel, i: number) {\n    return <Table.Row key={`${form.form_name}-${form.total}-${form.built}`}>\n        <Table.Cell width=\"1\">{i}</Table.Cell>\n        <Table.Cell width=\"13\">{form.form_name}</Table.Cell>\n        <Table.Cell width=\"1\">{form.total - form.built}</Table.Cell>\n        <Table.Cell width=\"1\">\n            <Checkbox onChange={ev => {session.completedBoxes[i] = !session.completedBoxes[i]}} checked={session.completedBoxes[i] ?? false}/>\n        </Table.Cell>\n    </Table.Row>;\n}\n\nfunction renderOrder(order: OrdersModel | null, forms: BigOrdersModel[], history: ReturnType<typeof useHistory>, session: Session) {\n    if (order == null) {\n        return <Message warning>\n            Заказ не найден\n        </Message>;\n    }\n\n    const addBox = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n        const el = ev.currentTarget as HTMLInputElement;\n        if (ev.key === \"Enter\" && el.value.trim() !== \"\") {\n            if (session.preparedBoxes.some(v => v === el.value.trim())) {\n                el.value = \"\";\n                return;\n            }\n            session.preparedBoxes.push(el.value.trim());\n            el.value = \"\";\n        }\n    }\n\n    const sendOrder = async () => {\n        await session.finishOrders();\n        history.push(\"/orders\");\n    };\n\n    return <Grid>\n        <Grid.Row>\n            <Grid.Column width={6}>\n                <Header sub>Сборные короба для заказа:</Header> {order.order_caption}\n                <br />\n                <br />\n                <br />\n                <Form>\n                    <Form.Field>\n                        <label>Соберите коробку и отсканируйте штрих-код:</label>\n                        <Input placeholder='202700030' onKeyPress={addBox} />\n                    </Form.Field>\n                </Form>\n                <Header sub>Собрано коробов:</Header>\n                <List>\n                    {session.preparedBoxes.map(i => <List.Item key={i}>{i}</List.Item>)}\n                </List>\n                <Divider />\n                <List>\n                    <List.Item>Итого: {session.preparedBoxes.length}</List.Item>\n                </List>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Header sub>Требуется собрать:</Header>\n                <Table celled compact>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell />\n                            <Table.HeaderCell>Товар</Table.HeaderCell>\n                            <Table.HeaderCell>К&nbsp;сбору</Table.HeaderCell>\n                            <Table.HeaderCell>Собрано</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {forms.map(renderForm.bind(null, session))}\n                    </Table.Body>\n                </Table>\n\n                {forms.some((f, i) => session.completedBoxes[i] !== true)\n                    ? <Button disabled negative>Не все короба укомплектованы</Button>\n                    : <Button positive onClick={sendOrder}>Сборные короба полностью укомплектованы</Button>\n                }\n            </Grid.Column>\n        </Grid.Row>\n\n    </Grid>;\n}\n\nexport function OrdersSmallPage() {\n    const {id} = useParams<{id: string}>();\n    const session = useSession();\n    const history = useHistory();\n\n    useEffect(() => {\n        session.preparedBoxes = [];\n        session.completedBoxes = {};\n        session.currentOrderId = parseInt(id);\n        session.fetchSmallOrdersToBuild().catch(console.error);\n    }, [session, id])\n\n    return <Observer>{() =>\n        <Layout>\n            {renderOrder(session.findOrder(parseInt(id)), session.currentSmallOrder, history, session)}\n        </Layout>\n    }</Observer>;\n}\n","/home/ilya/Projects/rosstat/ui/src/app/page/ordersPallet.tsx",["77"],"import React, {useEffect} from \"react\";\nimport {Observer} from \"mobx-react\";\nimport {Layout} from \"../component/layout\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {useSession} from \"../app\";\nimport {BigOrdersModel, BigPalletModel, OrdersModel} from \"../../api/orders\";\nimport {Button, Divider, Form, Grid, Header, Input, Message, Table} from \"semantic-ui-react\";\nimport {Session} from \"../../store/session\";\n\nfunction renderTypes(type: {type: BigOrdersModel, barcode: string | null}, i: number) {\n    return <Table.Row key={i}>\n        <Table.Cell>{type.type.form_name}</Table.Cell>\n        <Table.Cell width={3}>{type.barcode}</Table.Cell>\n    </Table.Row>\n}\n\nfunction renderOrder(order: OrdersModel | null, pallet: BigPalletModel, history: ReturnType<typeof useHistory>, session: Session) {\n    if (order == null) {\n        return <Message warning>\n            Заказ не найден\n        </Message>;\n    }\n\n    const addBox = async (ev: React.KeyboardEvent<HTMLInputElement>) => {\n        const el = ev.currentTarget as HTMLInputElement;\n        if (ev.key === \"Enter\" && el.value.trim() !== \"\") {\n            const barcode = el.value.trim();\n            session.lastError = \"\";\n            if (session.bigPalletOrderMatches.some(v => v.barcode === barcode)) {\n                el.value = \"\";\n                session.lastError = \"Такой штрих-код уже добавлен\";\n                return;\n            }\n\n            try {\n                const type = await session.requestPalletType(barcode);\n                if (type.success) {\n                    session.matchPalletBarcode(type.type, barcode);\n                } else {\n                    session.lastError = type.error ?? \"\";\n                }\n            } catch (ex) {\n                console.log(ex);\n                session.lastError = \"Произошла ошибка при добавлении штрих-кода\";\n            }\n            el.value = \"\";\n        }\n    }\n\n    const createPallet = async () => {\n        try {\n            session.lastError = \"\";\n            const resp = await session.finishBigPallet({\n                pallet_num: pallet.pallet_num,\n                barcodes: session.bigPalletOrderMatches.filter(m => m.barcode).map(m => m.barcode ?? \"\"),\n            });\n\n            if (resp.success) {\n                if (resp.last_pallet) {\n                    history.push(`/orders`);\n                } else {\n                    history.push(`/orders/big/${order?.id}`);\n                }\n            } else {\n                session.lastError = resp.error ?? \"\";\n            }\n\n        } catch (ex) {\n            session.lastError = \"Произошла ошибка при добавлении паллеты\";\n        }\n    }\n\n    return <>\n        <Grid columns={3}>\n            <Grid.Row>\n                <Grid.Column>\n                    <Header sub>Паллета №:</Header> {pallet.pallet_num}<br/><br/>\n                    <Form error={session.lastError.length > 0}>\n                        <Form.Field>\n                            <label>Сканируйте штрих-код коробки:</label>\n                            <Input placeholder='202700030' onKeyPress={addBox}/>\n                            <Message error>\n                                {session.lastError}\n                            </Message>\n                        </Form.Field>\n                    </Form>\n                </Grid.Column>\n                <Grid.Column>\n                    <Header sub>Для заказа №:</Header> {order.order_caption}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        <Table celled singleLine collapsing>\n            <Table.Body>\n                {session.bigPalletOrderMatches.map(renderTypes)}\n            </Table.Body>\n            <Table.Footer>\n                <Table.Row>\n                    <Table.HeaderCell>\n                        Итого:\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                        {session.bigPalletOrderMatches.filter(f => (f.barcode?.length ?? 0) > 0).length}\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Footer>\n        </Table>\n        <Button primary onClick={createPallet}>Паллета собрана</Button>\n    </>;\n}\n\n\nexport function OrdersPalletPage() {\n    const {id} = useParams<{ id: string }>();\n    const session = useSession();\n    const history = useHistory();\n\n    useEffect(() => {\n        session.lastError = \"\";\n        session.currentOrderId = parseInt(id);\n        session.fetchBigPallet().then(() => {\n            session.clearPalletBarcode();\n        }).catch(console.error);\n    }, [session, id])\n\n    return <Observer>{() =>\n        <Layout>\n            {renderOrder(session.findOrder(parseInt(id)), session.currentBigPalletOrder, history, session)}\n        </Layout>\n    }</Observer>;\n}\n","/home/ilya/Projects/rosstat/ui/src/app/page/logout.tsx",[],["78","79"],"/home/ilya/Projects/rosstat/ui/src/app/component/layout.tsx",[],"/home/ilya/Projects/rosstat/ui/src/store/session.ts",["80"],"/home/ilya/Projects/rosstat/ui/src/api/orders.tsx",[],"/home/ilya/Projects/rosstat/ui/src/app/page/shipment.tsx",[],["81","82"],"/home/ilya/Projects/rosstat/ui/src/app/page/login.tsx",[],"/home/ilya/Projects/rosstat/ui/src/app/page/ordersBig.tsx",[],["83","84"],"/home/ilya/Projects/rosstat/ui/src/app/page/shipmentPallet.tsx",[],"/home/ilya/Projects/rosstat/ui/src/app/component/appHeader.tsx",[],"/home/ilya/Projects/rosstat/ui/src/app/page/admin.tsx",[],"/home/ilya/Projects/rosstat/ui/src/app/app.tsx",[],"/home/ilya/Projects/rosstat/ui/src/api/request.ts",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":16,"nodeType":"91","messageId":"92","endLine":2,"endColumn":25},{"ruleId":"89","severity":1,"message":"93","line":7,"column":56,"nodeType":"91","messageId":"92","endLine":7,"endColumn":60},{"ruleId":"89","severity":1,"message":"94","line":7,"column":17,"nodeType":"91","messageId":"92","endLine":7,"endColumn":24},{"ruleId":"85","replacedBy":"95"},{"ruleId":"87","replacedBy":"96"},{"ruleId":"89","severity":1,"message":"97","line":1,"column":29,"nodeType":"91","messageId":"92","endLine":1,"endColumn":40},{"ruleId":"85","replacedBy":"98"},{"ruleId":"87","replacedBy":"99"},{"ruleId":"85","replacedBy":"100"},{"ruleId":"87","replacedBy":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'Divider' is defined but never used.",["102"],["103"],"'runInAction' is defined but never used.",["102"],["103"],["102"],["103"],"no-global-assign","no-unsafe-negation"]